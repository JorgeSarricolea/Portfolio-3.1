---
import experiences from "@js/Experiences.js";
---

<div class="w-full md:max-w-full">
  <h1
    class="text-primary md:text-5xl text-3xl font-bold text-center md:my-20 my-8 uppercase"
  >
    Work Experience
  </h1>
  {
    experiences.map((experience, index) => (
      <div
        class={`flex w-full ${index % 2 === 0 ? "flex-row" : "flex-row-reverse"} items-center md:my-12 mt-0 observer-element`}
        data-animation-direction={`${index % 2 === 0 ? "left" : "right"}`}
      >
        <img
          src={experience.image}
          alt={experience.title}
          class="md:max-h-80 mb-8 object-cover rounded-2xl md:w-1/2 w-full"
        />
        <div
          class={`relative md:w-1/2 h-fit p-6 md:mt-32 md:bottom-4 bottom-0 mb-8 ${index % 2 === 0 ? "md:right-8" : "md:left-8"} bg-gray rounded-2xl z-10 shadow-2xl`}
        >
          <div class="flex justify-between">
            <div>
              <h3 class="text-primary font-bold text-xl uppercase">
                {experience.company}
              </h3>
              <h2 class="text-white font-bold mb-2">
                {experience.position} | {experience.date}
              </h2>
            </div>
            <a
              href={experience.url}
              target="_blank"
              class="hover:text-primary h-fit"
            >
              <i class="fa-solid fa-up-right-from-square" />
            </a>
          </div>
          <p class="text-white">{experience.description}</p>
        </div>
      </div>
    ))
  }
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const observer = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const direction = entry.target.getAttribute(
              "data-animation-direction"
            );
            const animationClass =
              direction === "left"
                ? "animate-slideInLeft"
                : "animate-slideInRight";
            entry.target.classList.add(animationClass);
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.1 }
    );

    // Main container
    const elements = document.querySelectorAll(".observer-element");
    elements.forEach((el) => {
      observer.observe(el);
    });
  });
</script>
